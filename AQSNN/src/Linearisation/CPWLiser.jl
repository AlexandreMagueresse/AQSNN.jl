asymptotes(::AbstractSigmoid) = Float64[0, 1, 0], Float64[-1, 0, 1]
asymptotes(::AbstractReLU) = Float64[0, 1], Float64[0, 0]

function _CPWLise(ρ::AbstractActivation, N::Int, T::Type=Float32)
  αs, βs = asymptotes(ρ)
  ξs = Vector{eltype(αs)}()
  for i in 1:length(αs)-1
    α₋, β₋ = αs[i], βs[i]
    α₊, β₊ = αs[i+1], βs[i+1]
    push!(ξs, -(β₊ - β₋) / (α₊ - α₋))
  end

  for _ in 1:N
    # select intersection with highest error
    εs = @. (αs[1:end-1] * ξs + βs[1:end-1] - ∇⁰(ρ, ξs))
    i₀ = argmax(abs.(εs))

    # define tangent at intersection ξ₀
    # ρ(x) ≈ ρ(ξ₀) + ρ'(ξ₀)(x - ξ₀)
    ξ₀ = ξs[i₀]
    α₀ = ∇¹(ρ, ξ₀)
    β₀ = ∇⁰(ρ, ξ₀) - α₀ * ξ₀

    # intersect with neighbouring pieces
    # α± ξ± + β± = α₀ ξ± + β₀
    α₋, β₋ = αs[i₀], βs[i₀]
    α₊, β₊ = αs[i₀+1], βs[i₀+1]
    (α₀ == α₋ || α₀ == α₊) && break

    ξ₋ = -(β₋ - β₀) / (α₋ - α₀)
    ξ₊ = -(β₊ - β₀) / (α₊ - α₀)

    # update ξs and pieces
    ξs[i₀] = ξ₋
    insert!(ξs, i₀ + 1, ξ₊)
    insert!(αs, i₀ + 1, α₀)
    insert!(βs, i₀ + 1, β₀)
  end

  # compute final error
  εs = @. (αs[1:end-1] * ξs + βs[1:end-1] - ∇⁰(ρ, ξs))

  ξs, αs, βs, maximum(abs.(εs))
end

########
# Absε #
########
function CPWLise(ρ::Absε, N::Int, T::Type=Float32)
  if ((ρ.εp == 0.1) || (ρ.εp == 0.1f0)) && N in [2, 3, 5, 7, 9, 11, 13, 15]
    _CPWLiseAbsε(ρ, N, T)
  else
    _CPWLise(ρ, N, T)
  end
end

# function _CPWLiseAbsε(::Absε, N::Int, T::Type=Float32)
#   d = div(N, 2)
#   xs, ys = zeros(T, d), zeros(T, d)
#   ε = T(0)

#   # Store abscissas and values
#   if N == 2
#     ε = T(0.0026666666666667)
#     xs[1], ys[1] = 0.0000000000000000, 0.0000000000000000
#   elseif N == 3
#     ε = T(0.0008975300688758)
#     xs[1], ys[1] = 0.2412394270201972, 0.2412394270201972
#   elseif N == 4
#     ε = T(0.00039838097738442)
#     xs[1], ys[1] = 0.0000000000000000, 0.0676139642423635
#     xs[2], ys[2] = 0.7442454919330119, 0.7442454919330119
#   elseif N == 5
#     ε = T(0.00020712782261054878)
#     xs[1], ys[1] = 0.1641161650869104, 0.1923547581609724
#     xs[2], ys[2] = 1.7355691569320533, 1.7355691569320533
#   elseif N == 6
#     ε = T(0.0001191179730635)
#     xs[1], ys[1] = 0.0000000000000000, 0.08302032761289653
#     xs[2], ys[2] = 0.3911661979692000, 0.4050207590652183
#     xs[3], ys[3] = 3.5183103198870915, 3.5183103198870915
#   elseif N == 7
#     ε = T(7.365190330768808e-5)
#     xs[1], ys[1] = 0.1256306806010278, 0.1690486280775337
#     xs[2], ys[2] = 0.7447448320516247, 0.7522605974801486
#     xs[3], ys[3] = 6.4776755445787150, 6.4776755445787150
#   elseif N == 8
#     ε = T(4.809751616324581e-5)
#     xs[1], ys[1] = 0.0000000000000000, 0.0893959960132637
#     xs[2], ys[2] = 0.2738011133970493, 0.2988375919572183
#     xs[3], ys[3] = 1.2882932842948360, 1.2926766694444574
#     xs[4], ys[4] = 11.1019093644453320, 11.1019093644453320
#   elseif N == 9
#     ε = T(3.2790411822423374e-5)
#     xs[1], ys[1] = 0.1020691909179750, 0.1552199230868167
#     xs[2], ys[2] = 0.4736767635726230, 0.4890798400953943
#     xs[3], ys[3] = 2.0901424999367464, 2.0928560421006694
#     xs[4], ys[4] = 17.910098530849023, 17.9100985308490230
#   elseif N == 10
#     ε = T(2.314724718162158e-5)
#     xs[1], ys[1] = 0.0000000000000000, 0.0927257626611662
#     xs[2], ys[2] = 0.2132215040810020, 0.2470407310311832
#     xs[3], ys[3] = 0.7500780473334713, 0.7600185626713005
#     xs[4], ys[4] = 3.2342673409600815, 3.2360258068544474
#     xs[5], ys[5] = 27.5993213128219700, 27.59932131282197
#   elseif N == 11
#     ε = T(1.6819567377046553e-5)
#     xs[1], ys[1] = 0.0859683520079631, 0.1459834044582703
#     xs[2], ys[2] = 0.3498388320951041, 0.3724024739876233
#     xs[3], ys[3] = 1.1255783130282090, 1.1322665115126650
#     xs[4], ys[4] = 4.7934930973826290, 4.7946854487184880
#     xs[5], ys[5] = 40.5600707247441900, 40.5600707247441900
#   elseif N == 12
#     ε = T(1.255039078527768e-5)
#     xs[1], ys[1] = 0.0000000000000000, 0.0959861212124702
#     xs[2], ys[2] = 0.1741408799513116, 0.2152725613726228
#     xs[3], ys[3] = 0.5181063495122954, 0.5339380368067923
#     xs[4], ys[4] = 1.5905341499168584, 1.5953218265135590
#     xs[5], ys[5] = 6.5942278125775040, 6.5951168972206560
#     xs[6], ys[6] = 53.333751452059850, 53.3337514520598500
#   else
#     @notimplemented
#   end

#   if mod(N, 2) == 0
#     ys = [(-reverse(xs[2:end]) .+ reverse(ys[2:end]))..., ys...]
#     xs = [-reverse(xs[2:end])..., xs...]
#   else
#     ys = [(-reverse(xs[1:end]) .+ reverse(ys[1:end]))..., ys...]
#     xs = [-reverse(xs[1:end])..., xs...]
#   end

#   # Compute slopes
#   N = length(xs)
#   as, bs = zeros(T, N + 1), zeros(T, N + 1)
#   as[1] = 0
#   bs[1] = 0
#   for i in 1:N-1
#     x₋, y₋ = xs[i], ys[i]
#     x₊, y₊ = xs[i+1], ys[i+1]

#     as[i+1] = (y₊ - y₋) / (x₊ - x₋)
#     bs[i+1] = (y₋ * x₊ - y₊ * x₋) / (x₊ - x₋)
#   end
#   as[N+1] = 1
#   bs[N+1] = 0

#   xs, as, bs, sqrt(ε)
# end

function _CPWLiseAbsε(::Absε, N::Int, T::Type=Float32)
  ε = T(0)
  xs, as, bs = zeros(T, N - 1), zeros(T, N), zeros(T, N)

  if N == 2
    ε = T(0.0013333333285)
    xs[1] = 0
    as[1], bs[1] = 0, 0
  elseif N == 3
    ε = T(0.000513395215721)
    xs[1] = -0.2
    as[1], bs[1] = 0, 0
    as[2], bs[2] = 0.5, 0.1
  elseif N == 5
    ε = T(0.0001401571238539)
    xs[1] = -1.2083279068910637
    xs[2] = -0.1431950473973045
    as[1], bs[1] = 0, 0
    as[2], bs[2] = 0.0266656652718864, 0.0322208675038362
    as[3], bs[3] = 0.5, 0.1
  elseif N == 7
    ε = T(5.489573634216081e-5)
    xs[1] = -4.027981558226035
    xs[2] = -0.5998531115950572
    xs[3] = -0.1127098250981767
    as[1], bs[1] = 0, 0
    as[2], bs[2] = 0.0024593234913730, 0.0099061096689623
    as[3], bs[3] = 0.0722871721868504, 0.0517925619849333
    as[4], bs[4] = 0.5, 0.1
  elseif N == 9
    ε = T(2.607107982552722e-5)
    xs[1] = -10.36927683971326
    xs[2] = -1.5711034404081890
    xs[3] = -0.4075088444975023
    xs[4] = -0.0932977025945296
    as[1], bs[1] = 0, 0
    as[2], bs[2] = 0.0003718788826696, 0.0038561150852443
    as[3], bs[3] = 0.0114761348437581, 0.0213020498288840
    as[4], bs[4] = 0.1168823139144752, 0.0642560000648884
    as[5], bs[5] = 0.5, 0.1
  elseif N == 11
    ε = T(1.400944232158581e-5)
    xs[1] = -22.729261959306715
    xs[2] = -3.4521418508274570
    xs[3] = -0.9293504953012482
    xs[4] = -0.3127692504495047
    xs[5] = -0.0797378168392117
    as[1], bs[1] = 0, 0
    as[2], bs[2] = 7.742045132985709e-5, 0.0017597097192841
    as[3], bs[3] = 0.0024060657125649, 0.0097985234813244
    as[4], bs[4] = 0.0263024609916683, 0.0320066502698736
    as[5], bs[5] = 0.1559920125653655, 0.0725695541067113
    as[6], bs[6] = 0.5, 0.1
  elseif N == 13
    ε = T(8.212050258893417e-6)
    xs[1] = -44.551169955611490
    xs[2] = -6.7696617573249050
    xs[3] = -1.8353633963300760
    xs[4] = -0.6538324131292369
    xs[5] = -0.2558611705016808
    xs[6] = -0.0696884426581653
    as[1], bs[1] = 0, 0
    as[2], bs[2] = 2.015268942678894e-5, 0.0008978258917155
    as[3], bs[3] = 0.0006271605848493, 0.0050070640277515
    as[4], bs[4] = 0.0069554255088899, 0.0166217298316153
    as[5], bs[5] = 0.0448335747934954, 0.0413876915832384
    as[6], bs[6] = 0.1892826001976895, 0.0783465883009825
    as[7], bs[7] = 0.5, 0.1
  elseif N == 15
    ε = T(5.136714080308272e-6)
    xs[1] = -80.375211198002050
    xs[2] = -12.214708131754346
    xs[3] = -3.3172887729715000
    xs[4] = -1.1974976945818976
    xs[5] = -0.5046538898035300
    xs[6] = -0.2175880133300186
    xs[7] = -0.0619245494872188
    as[1], bs[1] = 0, 0
    as[2], bs[2] = 6.191744799655119e-6, 0.0004976627959564
    as[3], bs[3] = 0.0001927507232423, 0.0027764262669911
    as[4], bs[4] = 0.0021452474813097, 0.0092534218417916
    as[5], bs[5] = 0.0141306401710732, 0.0236059019564420
    as[6], bs[6] = 0.0651831566554889, 0.0493697529845613
    as[7], bs[7] = 0.2174630128060222, 0.0825040243545368
    as[8], bs[8] = 0.5, 0.1
  else
    @notimplemented
  end

  for i in 1:div(N, 2)
    xs[end-i+1] = -xs[i]
    as[end-i+1], bs[end-i+1] = T(1) - as[i], bs[i]
  end

  xs, as, bs, sqrt(2 * ε)
end

########
# Tanh #
########
function CPWLise(ρ::Tanh, N::Int, T::Type=Float32)
  if N in [3, 5, 7, 9, 11, 13, 15]
    _CPWLiseTanh(ρ, N, T)
  else
    _CPWLise(ρ, N, T)
  end
end

# function _CPWLiseTanh(::Tanh, N::Int, T::Type=Float32)
#   d = div(N, 2)
#   xs, ys = zeros(T, d), zeros(T, d)
#   ε = T(0)

#   if N == 3
#     ε = T(0.019788022531948668)
#     xs[1], ys[1] = 1.299840952041517, 1.0000000000000000
#   elseif N == 5
#     ε = T(0.0023724290222519595)
#     xs[1], ys[1] = 0.8187295685352800, 0.7263554899204646
#     xs[2], ys[2] = 1.9793380467223909, 1.0000000000000000
#   elseif N == 7
#     ε = T(0.0006041039393362146)
#     xs[1], ys[1] = 0.6241406137423869, 0.5803377495740054
#     xs[2], ys[2] = 1.3016434765781202, 0.8856591240558928
#     xs[3], ys[3] = 2.4104403896907170, 1.0000000000000000
#   elseif N == 9
#     ε = T(0.00021898046374025162)
#     xs[1], ys[1] = 0.5140589668989423, 0.48878461868351314
#     xs[2], ys[2] = 1.0142228647757210, 0.7826636941397399
#     xs[3], ys[3] = 1.6365479969794379, 0.9396982065292925
#     xs[4], ys[4] = 2.7288783171338564, 1.0000000000000000
#   elseif N == 11
#     ε = T(9.763633203918251e-5)
#     xs[1], ys[1] = 0.4417816452980839, 0.4254431628448025
#     xs[2], ys[2] = 0.8471253552259914, 0.6999584326230600
#     xs[3], ys[3] = 1.2952545235479140, 0.8699313441675598
#     xs[4], ys[4] = 1.8967276553604860, 0.9636907963350922
#     xs[5], ys[5] = 2.9819138337250830, 1.0000000000000000
#   elseif N == 13
#     ε = T(4.989843237128075e-5)
#     xs[1], ys[1] = 0.3900729192518018, 0.3786949784372213
#     xs[2], ys[2] = 0.7352976420036250, 0.6337981140935249
#     xs[3], ys[3] = 1.0926244148364366, 0.8049354371104045
#     xs[4], ys[4] = 1.5191679043959008, 0.9148469143832003
#     xs[5], ys[5] = 2.1105028243449033, 0.9761625621580372
#     xs[6], ys[6] = 3.1920127518725088, 1.0000000000000000
#   else
#     @notimplemented
#   end

#   ys = [-reverse(ys[1:end])..., ys...]
#   xs = [-reverse(xs[1:end])..., xs...]

#   # Compute slopes
#   N = length(xs)
#   as, bs = zeros(T, N + 1), zeros(T, N + 1)
#   as[1] = 0
#   bs[1] = -1
#   for i in 1:N-1
#     x₋, y₋ = xs[i], ys[i]
#     x₊, y₊ = xs[i+1], ys[i+1]

#     as[i+1] = (y₊ - y₋) / (x₊ - x₋)
#     bs[i+1] = (y₋ * x₊ - y₊ * x₋) / (x₊ - x₋)
#   end
#   as[N+1] = 0
#   bs[N+1] = +1

#   xs, as, bs, sqrt(ε)
# end

function _CPWLiseTanh(::Tanh, N::Int, T::Type=Float32)
  ε = T(0)
  xs, as, bs = zeros(T, N - 1), zeros(T, N), zeros(T, N)

  if N == 3
    ε = T(0.024787882043)
    xs[2] = 1
    as[2], bs[2] = 1, 0
    as[3], bs[3] = 0, 1
  elseif N == 5
    ε = T(0.0027884387470136)
    xs[3] = 0.6581493850090618
    xs[4] = 1.7113492530445695
    as[3], bs[3] = 1, 0
    as[4], bs[4] = 0.3245828501940270, 0.4445253817693745
    as[5], bs[5] = 0, 1
  elseif N == 7
    ε = T(0.0006970598654595)
    xs[4] = 0.5089766710952531
    xs[5] = 1.1664679840955545
    xs[6] = 2.1506612560083966
    as[4], bs[4] = 1, 0
    as[5], bs[5] = 0.5342426766800265, 0.2370596119616357
    as[6], bs[6] = 0.1420080932700969, 0.6945886957643759
    as[7], bs[7] = 0, 1
  elseif N == 9
    ε = T(0.0002506291330788)
    xs[5] = 0.4220890097430026
    xs[6] = 0.9200855786660780
    xs[7] = 1.5092214104772819
    xs[8] = 2.4725192492652415
    as[5], bs[5] = 1, 0
    as[6], bs[6] = 0.6570553078579959, 0.1447531855028374
    as[7], bs[7] = 0.3014035725743107, 0.4719832181649217
    as[8], bs[8] = 0.0759184272681454, 0.8122902272055674
    as[9], bs[9] = 0, 1
  elseif N == 11
    ε = T(0.0001112551597601)
    xs[6] = 0.3641663978081094
    xs[7] = 0.7731769096063311
    xs[8] = 1.2083322155225047
    xs[9] = 1.7729577231701890
    xs[10] = 2.7273426001349890
    as[6], bs[6] = 1, 0
    as[7], bs[7] = 0.7345394073428410, 0.0966718277879635
    as[8], bs[8] = 0.4278287956479828, 0.3338133906816613
    as[9], bs[9] = 0.1866106533215376, 0.6252850430231978
    as[10], bs[10] = 0.0459585634718364, 0.8746552520022529
    as[11], bs[11] = 0, 1
  elseif N == 13
    ε = T(5.670430863795751e-5)
    xs[7] = 0.3223452549063222
    xs[8] = 0.6735155094019311
    xs[9] = 1.0252747703359990
    xs[10] = 1.4357358567802710
    xs[11] = 1.9886777286512730
    xs[12] = 2.9385162631354707
    as[7], bs[7] = 1, 0
    as[8], bs[8] = 0.7867618179710036, 0.0687363161418976
    as[9], bs[9] = 0.5237748184724671, 0.2458621390752398
    as[10], bs[10] = 0.2916427968927343, 0.4838612441880315
    as[11], bs[11] = 0.1242209345724431, 0.7242348151302034
    as[12], bs[12] = 0.0302470133715238, 0.9111186592965013
    as[13], bs[13] = 0, 1
  elseif N == 15
    ε = T(3.186897403097003e-5)
    xs[8] = 0.2905027247636398
    xs[9] = 0.6005638493484032
    xs[10] = 0.8993904868978219
    xs[11] = 1.2273129657480095
    xs[12] = 1.6251890688931140
    xs[13] = 2.1716766048592215
    xs[14] = 3.1189169881191945
    as[8], bs[8] = 1, 0
    as[9], bs[9] = 0.8238303409026866, 0.0511777659884511
    as[10], bs[10] = 0.5969677451285820, 0.1874232397797181
    as[11], bs[11] = 0.3818834049067896, 0.3808680492558927
    as[12], bs[12] = 0.2078048660156381, 0.5945168970954722
    as[13], bs[13] = 0.0873606605335305, 0.7902615032565095
    as[14], bs[14] = 0.0211344389782837, 0.9340834392362625
    as[15], bs[15] = 0, 1
  else
    @notimplemented
  end

  for i in 1:div(N, 2)
    xs[i] = -xs[end-i+1]
    as[i], bs[i] = as[end-i+1], -bs[end-i+1]
  end

  xs, as, bs, sqrt(2 * ε)
end
